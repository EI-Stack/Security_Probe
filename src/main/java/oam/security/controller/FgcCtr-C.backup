package solaris.nfm.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;

import lombok.extern.slf4j.Slf4j;
import ControllerUtil;
import ExceptionBase;
import solaris.nfm.service.FgcService;

@RestController
@RequestMapping("/v1/fgc")
@Slf4j
public class FgcCtr
{
	@Autowired
	private FgcService service;

	@GetMapping(value = "/config")
	@ResponseStatus(HttpStatus.OK)
	public JsonNode fetchConfig() throws Exception
	{
		return this.service.getJsonNode("/config");
	}

	@PutMapping(value = "/config")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void modifyConfig(@RequestBody final JsonNode requestJson) throws Exception
	{
		this.service.create("/config", requestJson);
	}

	@GetMapping(value = "/sm/algorithms")
	@ResponseStatus(HttpStatus.OK)
	public JsonNode fetchAlgorithms() throws Exception
	{
		return this.service.getJsonNode("/sm/algo");
	}

	@PutMapping(value = "/sm/algorithms")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void modifyAlgorithms(@RequestBody final JsonNode requestJson) throws Exception
	{
		this.service.create("/sm/algo", requestJson);
	}

	@GetMapping(value = "/em/status")
	@ResponseStatus(HttpStatus.OK)
	public JsonNode fetchEmStatuses(@RequestParam final String networkType) throws Exception
	{
		return this.service.getJsonNode("/em/status?nf=" + networkType);
	}

	@DeleteMapping(value = "/em/status/{id}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void removeEmStatuses(@PathVariable("id") final Long id) throws Exception
	{
		this.service.delete("/em/status/" + id);
	}

	@GetMapping(value = "/nfs")
	@ResponseStatus(HttpStatus.OK)
	public JsonNode fetchNfsList() throws Exception
	{
		return this.service.getJsonNode("/nfs");
	}

	@GetMapping(value = "/ues")
	@ResponseStatus(HttpStatus.OK)
	public JsonNode fetchAllUes(@RequestParam(required = false) final String k) throws Exception
	{
		final ArrayNode ues = (ArrayNode) this.service.getJsonNode("/ues?k=" + k).path("uelist");
		return ControllerUtil.createResponseJson(ues);
	}

	@GetMapping(value = "/ues/{imsi}")
	@ResponseStatus(HttpStatus.OK)
	public JsonNode fetchUe(@PathVariable("imsi") final String imsi) throws Exception
	{
		return this.service.getJsonNode("/ues/" + imsi);
	}

	@PostMapping(value = "/ues")
	@ResponseStatus(HttpStatus.CREATED)
	public void createUe(@RequestBody final JsonNode requestJson) throws Exception
	{
		this.service.create("/ues", requestJson);
	}

	@PutMapping(value = "/ues/{imsi}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void modifyUe(@PathVariable("imsi") final String imsi, @RequestBody final JsonNode requestJson) throws Exception
	{
		this.service.modify("/ues/" + imsi, requestJson);
	}

	@DeleteMapping(value = "/ues/{imsi}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void removeUe(@PathVariable("imsi") final String imsi) throws Exception
	{
		this.service.delete("/ues/" + imsi);
	}

	// @GetMapping(value = "/gnbs")
	// @ResponseStatus(HttpStatus.OK)
	// public JsonNode fetchAllGnbs(@RequestParam final Map<String, String> requestParams) throws Exception
	// {
	// String url = "/gnbs";
	// if (requestParams.size() > 0)
	// {
	// url += "?";
	// for (final String paramName : requestParams.keySet())
	// {
	// url += paramName + "=" + requestParams.get(paramName) + "&";
	// }
	// url = url.substring(0, url.length() - 1);
	// }
	//
	// final ArrayNode gnbs = (ArrayNode) this.service.getJsonNode(url).path("gnblist");
	// return ControllerUtil.createResponseJson(gnbs);
	// }

	@GetMapping(value = "/gnbs/{id}")
	@ResponseStatus(HttpStatus.OK)
	public JsonNode fetchGnb(@PathVariable("id") final String id) throws Exception
	{
		return this.service.getJsonNode("/gnbs/" + id);
	}

	@GetMapping(value = "/amfId")
	@ResponseStatus(HttpStatus.OK)
	public JsonNode fetchAmfId() throws Exception
	{
		final JsonNode rawData = this.service.getJsonNode("/v1/config/amf/profile");
		final JsonNode amfProfile = rawData.path("data").path("cnaamfcc:amfcc").path("amfprofile");
		final ObjectNode result = JsonNodeFactory.instance.objectNode();
		result.put("regionId", amfProfile.path("amfregionid").asInt());
		result.put("setId", amfProfile.path("amfsetid").asInt());
		result.set("pointer", amfProfile.path("amfpointer"));

		return result;
	}

	@GetMapping(value = "/gnbs")
	@ResponseStatus(HttpStatus.OK)
	public JsonNode fetchGnbs() throws Exception
	{
		final JsonNode rawData = this.service.getJsonNode("/v1/config/amf/gnbs");
		final ArrayNode tnlas = (ArrayNode) rawData.path("tnla");
		final ArrayNode result = JsonNodeFactory.instance.arrayNode();

		for (final JsonNode tnla : tnlas)
		{
			final ObjectNode gnb = JsonNodeFactory.instance.objectNode();
			gnb.put("gnbId", tnla.path("tnladetail").path("granid").path("gnbid").asInt());
			gnb.put("ip", tnla.path("tnlaid").asText().split(";")[1]);
			result.add(gnb);
		}
		return result;
	}

	@GetMapping(value = "/cipheringAlgorithms")
	@ResponseStatus(HttpStatus.OK)
	public JsonNode fetchCipheringAlgorithms() throws Exception
	{
		final JsonNode rawData = this.service.getJsonNode("/v1/config/amf/nasDefaultSecurity");
		final JsonNode defaultNode = rawData.path("data").path("cnaamfcc:amfcc").path("interface").path("nas").path("security").path("default");
		final ArrayNode cipheringAlgorithms = (ArrayNode) defaultNode.path("cipheringalgorithms");
		final ArrayNode result = JsonNodeFactory.instance.arrayNode();

		for (final JsonNode cipheringAlgorithm : cipheringAlgorithms)
		{
			result.add(cipheringAlgorithm);
		}
		return result;
	}

	@PutMapping(value = "/cipheringAlgorithms")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void ModifyCipheringAlgorithms(@RequestBody final JsonNode requestJson) throws Exception
	{
		this.service.modify("/v1/config/amf/cipheringAlgorithms", requestJson);
	}

	@GetMapping(value = "/integrityAlgorithms")
	@ResponseStatus(HttpStatus.OK)
	public JsonNode fetchIntegrityalgorithms() throws Exception
	{
		final JsonNode rawData = this.service.getJsonNode("/v1/config/amf/nasDefaultSecurity");
		final JsonNode defaultNode = rawData.path("data").path("cnaamfcc:amfcc").path("interface").path("nas").path("security").path("default");
		final ArrayNode integrityAlgorithms = (ArrayNode) defaultNode.path("integrityalgorithms");
		final ArrayNode result = JsonNodeFactory.instance.arrayNode();

		for (final JsonNode integrityAlgorithm : integrityAlgorithms)
		{
			result.add(integrityAlgorithm);
		}
		return result;
	}

	@PutMapping(value = "/integrityAlgorithms")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void ModifyIntegrityAlgorithms(@RequestBody final JsonNode requestJson) throws Exception
	{
		this.service.modify("/v1/config/amf/integrityAlgorithms", requestJson);
	}

	@GetMapping(value = "/plmns")
	@ResponseStatus(HttpStatus.OK)
	public JsonNode fetchPlmns() throws Exception
	{
		final JsonNode rawData = this.service.getJsonNode("/v1/config/upf/plmns");
		return rawData.path("plmnentry");
	}

	@GetMapping(value = "/nssai")
	@ResponseStatus(HttpStatus.OK)
	public JsonNode fetchNssai() throws Exception
	{
		final JsonNode rawData = this.service.getJsonNode("/v1/config/upf/nssai");
		return rawData.path("allowednssai");
	}

	@GetMapping(value = "/n3Interfaces")
	@ResponseStatus(HttpStatus.OK)
	public JsonNode fetchN3Interfaces() throws Exception
	{
		final JsonNode rawData = this.service.getJsonNode("/v1/config/upf/interfaces");
		final ArrayNode interfaces = (ArrayNode) rawData.path("networkcontexts");
		final ArrayNode result = JsonNodeFactory.instance.arrayNode();

		for (final JsonNode tmpInterface : interfaces)
		{
			if (tmpInterface.path("name").asText().startsWith("N3"))
			{
				result.addAll((ArrayNode) tmpInterface.path("interfaces"));
			}
		}

		return result;
	}

	@GetMapping(value = "/n6Interfaces")
	@ResponseStatus(HttpStatus.OK)
	public JsonNode fetchN6Interfaces() throws Exception
	{
		final JsonNode rawData = this.service.getJsonNode("/v1/config/upf/interfaces");
		final ArrayNode interfaces = (ArrayNode) rawData.path("networkcontexts");
		final ArrayNode result = JsonNodeFactory.instance.arrayNode();

		for (final JsonNode tmpInterface : interfaces)
		{
			if (tmpInterface.path("name").asText().startsWith("N6"))
			{
				result.addAll((ArrayNode) tmpInterface.path("interfaces"));
			}
		}

		return result;
	}

	@GetMapping(value = "/ipPool")
	@ResponseStatus(HttpStatus.OK)
	public JsonNode fetchIpPool() throws Exception
	{
		final JsonNode rawData = this.service.getJsonNode("/v1/config/upf/ipPool");
		final ArrayNode networkcontext = (ArrayNode) rawData.path("data").path("cnappe:upf").path("serviceconstruct").path("networkcontext");

		return networkcontext;
	}

	@GetMapping(value = "/ratio")
	@ResponseStatus(HttpStatus.OK)
	public JsonNode fetchRatio() throws Exception
	{
		final JsonNode rawData = this.service.getJsonNode("/v1/config/smf/qosFlow");
		final ArrayNode networkcontext = (ArrayNode) rawData.path("data").path("cnasmf:smf").path("serviceconstruct").path("qosflow");

		return networkcontext;
	}

	@GetMapping(value = "/dnns")
	@ResponseStatus(HttpStatus.OK)
	public JsonNode fetchDnns() throws Exception
	{
		final JsonNode rawData = this.service.getJsonNode("/v1/config/smf/dnns");
		final ArrayNode dnns = (ArrayNode) rawData.path("data").path("cnasmf:smf").path("serviceconstruct").path("dnn");

		return dnns;
	}

	@GetMapping(value = "/nssf/heartbeatTimer")
	@ResponseStatus(HttpStatus.OK)
	public JsonNode fetchNssfHeartbeatTimer() throws Exception
	{
		final JsonNode rawData = this.service.getJsonNode("/v1/config/nssf/heartbeatTimer");
		final JsonNode heartbeatTimer = rawData.path("data").path("cnaSliceSelector:sliceSelector").path("nssfProfile").path("heartBeatTimer");

		return JsonNodeFactory.instance.objectNode().put("heartbeatTimer", heartbeatTimer.asInt());
	}

	@PutMapping(value = "/nssf/heartbeatTimer")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void ModifyNssfHeartbeatTimer(@RequestBody final JsonNode requestJson) throws Exception
	{
		this.service.modify("/v1/config/nssf/heartbeatTimer", requestJson);
	}

	@PutMapping(value = "/backupProfile")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void backupProfile() throws ExceptionBase
	{
		JsonNode rawData = this.service.getJsonNode("/v1/config/amf/nasDefaultSecurity");
		final JsonNode defaultNode = rawData.path("data").path("cnaamfcc:amfcc").path("interface").path("nas").path("security").path("default");
		final ArrayNode cipheringAlgorithms = (ArrayNode) defaultNode.path("cipheringalgorithms");
		final ArrayNode integrityAlgorithms = (ArrayNode) defaultNode.path("integrityalgorithms");

		rawData = this.service.getJsonNode("/v1/config/nssf/heartbeatTimer");
		final JsonNode heartbeatTimer = rawData.path("data").path("cnaSliceSelector:sliceSelector").path("nssfProfile").path("heartBeatTimer");

		final ObjectNode result = JsonNodeFactory.instance.objectNode();
		result.set("cipheringAlgorithms", cipheringAlgorithms);
		result.set("integrityAlgorithms", integrityAlgorithms);
		result.put("heartbeatTimer", heartbeatTimer.asInt());

		log.debug("{}", result.toPrettyString());
	}

	@PutMapping(value = "/restoreProfile")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void restoreProfile(@RequestBody final JsonNode requestJson) throws ExceptionBase
	{
		this.service.modify("/v1/config/amf/cipheringAlgorithms", requestJson.path("cipheringAlgorithms"));
		this.service.modify("/v1/config/amf/integrityAlgorithms", requestJson.path("integrityAlgorithms"));
		this.service.modify("/v1/config/nssf/heartbeatTimer", JsonNodeFactory.instance.objectNode().put("heartbeatTimer", requestJson.path("heartbeatTimer").asInt()));
	}

	private String fixIsoString(final String isoString)
	{
		final Integer index = isoString.indexOf("+");
		if (index == -1) return isoString;

		return isoString.substring(0, index + 3) + ":" + isoString.substring(index + 3);
	}
}